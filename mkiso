#! /bin/sh


#   Exit on error.

set -e

_e () { echo -e "${0##*/}: \e[31mError:\e[0m $@" >&2; exit 1; }


#   Option parsing.

[ "$1" = "-h" -o "$1" = "--help" ] && {
	echo "${0##*/}: Create an ISO image."
	echo "Usage: mkiso [-h] [-V label] [-g grub-configuration] [-t path-to-grub-theme] [-u UPDATE_URL] [-s HASH_URL] <directory> <output>"
	exit
}

while [ $# -gt 2 ]; do
	case $1 in

		-V)
			LABEL=$2
			shift 2
		;;

		-g)
			CONFIG_FILES="$CONFIG_FILES $2"
			shift 2
		;;

		-t)
			THEMES="$THEMES $2"
			shift 2
		;;

		-u)
			UPDATE_URL="$2"
			shift 2
		;;

		-s)
			HASH_URL="$2"
			shift 2
		;;

		-*) _e "Unknown option '$1'.";;

	esac
done


#   Check the command line.

[ $# -eq 2 ] ||
	_e "Bad command line. Wrong number of arguments."

[ -d "$1" ] ||
	_e "'$1' is not a directory."

[ "$2" ] ||
	_e "No output specified."


#   Copy the configuration files.

[ "$CONFIG_FILES" ] && {
	mkdir -p $1/boot/grub
	cp $CONFIG_FILES $1/boot/grub
}


#   Copy the themes.

[ "$THEMES" ] && {
	mkdir -p $1/boot/grub/themes
	cp -r $THEMES $1/boot/grub/themes
}


#   Create the .INFO file; if needed.

[ "$VERSION" ] && echo "$VERSION" >> $1/.INFO
[ "$HASH_URL" ] && echo "$HASH_URL" >> $1/.INFO
[ "$UPDATE_URL" ] && echo "$UPDATE_URL" >> $1/.INFO


#   Generate an ESP.
#   _mk_efi_img <output>.

efi_tmp_dir=$(mktemp -d)
grub_img=$efi_tmp_dir/bootx64.efi
efi_img=$efi_tmp_dir/efi_img

grub-mkimage \
	-C xz \
	-O x86_64-efi \
	-o $grub_img \
	-p /boot/grub \
	boot linux search normal configfile \
	part_gpt btrfs ext2 fat iso9660 loopback \
	test keystatus gfxmenu regexp probe \
	efi_gop efi_uga all_video gfxterm font \
	echo read ls cat png jpeg halt reboot

size=$(( $(stat -c %s $grub_img) / 1024 + 511))

export MTOOLS_SKIP_CHECK=1
mkfs.vfat -C $efi_img $size

mmd \
	-i $efi_img \
	::/efi \
	::/efi/boot

mcopy \
	-i $efi_img \
	$grub_img \
	::/efi/boot


#   Build the image.

ISO_DIR="$1"
OUTPUT="$2"

xorriso -as mkisofs \
	-V "$LABEL" \
	-r -J -l \
	-iso-level 3 \
	-joliet-long \
	-no-emul-boot \
	-eltorito-alt-boot \
	-append_partition 2 0xef $efi_img \
	-e --interval:appended_partition_2:all:: \
	-partition_cyl_align all \
	-partition_offset 16 \
	-o "$OUTPUT" "$ISO_DIR"
