#! /bin/sh


#   Exit on error.

set -e

_e () { echo -e "${0##*/}: \e[31mError:\e[0m $@" >&2; exit 1; }


#   Option parsing.

[ "$1" = "-h" -o "$1" = "--help" ] && {
	echo "${0##*/}: Create an ISO image."
	echo "Usage: mkiso [-h] [-g grub-configuration] [-t path-to-grub-theme] [-u UPDATE_URL] [-s HASH_URL] [-r RELEASE] <directory> <output>"
	exit
}

while :; do
	case $1 in

		-V)
			label=$2
			shift 2
		;;

		-g)
			config_files="$config_files $2"
			shift 2
		;;

		-t)
			themes="$themes $2"
			shift 2
		;;

		-u)
			update_url="$2"
			shift 2
		;;

		-s)
			hash_url="$2"
			shift 2
		;;

		-r)
			release="$2"
			shift 2
		;;

		#	Just ignore this flag.
		-b)
			shift
		;;

		-*) _e "Unknown option '$1'.";;

		*) break;;

	esac
done


#   Check the command line.

iso_dir="$1"
output="$2"

[ -d "$iso_dir" ] ||
	_e "'$iso_dir' is not a directory."

[ "$output" ] ||
	_e "No output was given."


#   Copy the configuration files.

[ "$config_files" ] && {
	mkdir -p "$iso_dir"/boot/grub
	cp $config_files "$iso_dir"/boot/grub
}


#   Copy the themes.

[ "$themes" ] && {
	mkdir -p "$iso_dir"/boot/grub/themes
	cp -r $themes "$iso_dir"/boot/grub/themes
}


#   Create the .INFO file; if needed.

[ "$hash_url" ] && echo "HASH_URL $hash_url" >> "$iso_dir"/.INFO
[ "$update_url" ] && echo "UPDATE_URL $update_url" >> "$iso_dir"/.INFO
[ "$release" ] && echo "RELEASE $release" >> "$iso_dir"/.INFO


#   Build the image.

grub-mkrescue \
	--compress=xz \
	-o "$output" "$iso_dir"
