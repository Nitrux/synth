#! /bin/sh

set -e

case "$1" in

	-h|--help)

		echo "${0##*/}: Generate the ISO image described in the given file."
		echo "Usage: ${0##*/} <input> [output]"
		exit

	;;

esac

_e () { echo -e "${0##*/}: \e[31mError:\e[0m $@" >&2; exit 1; }


#   Functions.

get_k () { echo "$desc" | grep "^[ \t]*$1" | cut -d ' ' -f 2-; }


setup_base () {
	sys_base=$(get_k BASE)

	case $sys_base in
		@URL:*)
			tmp=$(mktemp)
			wget -qO $tmp "${sys_base#@URL:}"
			tar xf $tmp -C $tmp_root
		;;

		@LOCAL:*) tar xf "${sys_base#@LOCAL:}" -C $tmp_root;;

		*) pull $tmp_root $sys_base;;
	esac
}


install_pkgs () {
	pm=$(get_k PACKAGE_MANAGER)
	pkgs=$(get_k PACKAGES)

	case "$pm" in
		pacman)
			pm_u="$pm --noconfirm -Syu"
			pm_i="$pm --noconfirm -Syu"
		;;

		apt)
			pm_u="$pm -y upgrade"
			pm_i="$pm -y install"
		;;

		apk)
			pm_u="$pm update"
			pm_i="$pm add"
		;;

		"")
			echo " :: WARNING:"
			echo "    No package manager specified. Will not install any packages."
			return
		;;

		?*)
			_e "Unsupported package manager '$pm'. Aborting."
		;;
	esac

	runch $tmp_root $pm_u

	[ "$pkgs" ] || {
		echo " :: WARNING:"
		echo "    No additional packages were specified."
		return
	}

	runch $tmp_root $pm_i $pkgs
}


setup_bootloader () {
	for key in GRUB_FILES GRUB_THEME INITRAMFS KERNELS; do
		for item in $(get_k $key); do

			src=${item%::*}
			dst=${item#*::}
			src_path=${src}
			dst_path=${dst%*/}

			test -e $tmp_root ||
				_e "'$src' does not exist."

			mkdir -p $iso_dir/

			test -d $src && {
				:
			} || {
				:
			}

		done
	done
}


#   Setup the build.

root_sfs=rootfs.sfs
tmp_root=$(mktemp -d $(pwd)/.tmp.XXXX)
iso_dir=$(mktemp -d $(pwd)/.tmp.XXXX)
input="$1"
output="${2:-${1%.th}.iso}"

[ -f "$input" ] ||
	_e "'$input' is not a file."

[ -e "$output" ] &&
	_e "'$output' already exists."


#   Start the build.

desc=$(
	sed -E '
		/^[ \t]*(#|$)/d
		s/[ \t]*$//
		:x N
		/,$/ b x
		/[A-Z_]$/ b x
		s/,\n[ \t]*/ /g
		s/([A-Z_])\n[ \t]*/\1 /g
	' $input
)

setup_base

install_pkgs
setup_bootloader


#   All done. Generate the artifacts.

mksquashfs \
	$tmp_root \
	$iso_dir/$root_sfs \
	-b 1M \
	-comp xz \
	-no-progress


mkiso \
	-u "$(get_k UPDATE_URL)" \
	-s "$(get_k HASH_URL)" \
	-r "$(get_k RELEASE)" \
	$iso_dir \
	$output


zsyncmake \
	$output \
	-u "$(_get_k UPDATE_URL)" \
	-o $output.zsync


sha256sum $output > $output.sha256sum
md5sum $output > $output.md5sum

echo "Successfully generated '$output'."
