#! /bin/sh

set -e

case "$1" in

	-h|--help)

		echo "${0##*/}: Generate the ISO image described in the given file."
		echo "Usage: ${0##*/} <synth-file> [output]"
		exit

	;;

esac

_e () { printf %b "${0##*/}: \e[31mError:\e[0m $@\n" >&2; exit 1; }


# -- Setup the build.

root_sfs=rootfs.sfs
tmp_root=$(mktemp -d) #$(pwd)/.tmp_root
iso_dir=$(mktemp -d) #$(pwd)/.iso_dir
input="$1"
output="${2:-${1%.th}.iso}"

mkdir -p $tmp_root $iso_dir

desc=$(sed -E '
/^[ \t]*(#|$)/d
s/[ \t]*$//
:x N
/,$/ b x
/[A-Z_]$/ b x
s/,\n[ \t]*/ /g
s/([A-Z_])\n[ \t]*/\1 /g
' $input)


# -- Functions.

get_k () { echo "$desc" | grep "^[ \t]*$1" | cut -d ' ' -f 2-; }


bst () {
	sys_base=$(get_k $1)
	tmp=$(mktemp)

	case $sys_base in
		@URL:*)
			tmp=$(mktemp)
			wget -qO $tmp "${sys_base#@URL:}"
			tar xf $tmp -C $tmp_root
		;;

		@LOCAL:*) tar xf "${sys_base#@LOCAL:}" -C $tmp_root;;

		*) pull $tmp_root $sys_base;;
	esac
}


upd () {
	sys_u_url=$(get_k $1)

	[ "$sys_u_url" ] || {
		echo " :: WARNING: 'SYSTEM.UPDATES_URL' was not set in $input."
		return
	}

	echo "$sys_u_url" > $iso_dir/.INFO
}


pkg () {
	pm=$(get_k $1)
	pkgs=$(get_k $2)

	case "$pm" in
		pacman)
			pm_u="$pm --noconfirm -Syu"
			pm_i="$pm --noconfirm -Syu"
		;;

		apt)
			pm_u="$pm -y upgrade"
			pm_i="$pm -y install"
		;;

		apk)
			pm_u="$pm update"
			pm_i="$pm add"
		;;

		"")
			echo " :: WARNING: No package manager specified. Will not install any packages."
			return
		;;

		?*) _e "Unsupported package manager '$1'. Aborting.";;
	esac

	runch $tmp_root $pm_u

	[ "$pkgs" ] || {
		echo " :: WARNING: No additional packages were specified."
		return
	}

	runch $tmp_root $pm_i $pkgs
}


boo () {
	for key in $@; do
		for item in $(get_k $key); do

			src=${item#:*}
			dst=${item%*:}

			mkdir -p $iso_dir/${dst%*/}
			cp -ur $tmp_root/$src $iso_dir/$dst

		done
	done
}


# -- Start the build.

bst SYSTEM.BASE
upd SYSTEM.UPDATES_URL

pkg \
	SYSTEM.PACKAGE_MANAGER \
	SYSTEM.PACKAGES

boo \
	BOOTLODER.FILES \
	BOOTLOADER.THEME \
	BOOTLOADER.INITRAMFS \
	BOOTLOADER.KERNELS


mksquashfs \
	$tmp_root \
	$iso_dir/$root_sfs \
	-b 1M \
	-comp xz \
	-no-progress


mkiso \
	$iso_dir \
	$output


zsyncmake \
	$output \
	-u "$(_get_k SYSTEM.UPDATES_URL)" \
	-o $output.zsync


sha256sum $output > $output.sha256sum

echo "Successfully generated '$OUTPUT'."
